class Solution {
public:
    ListNode* Mid(ListNode *head){
        ListNode *slow,*fast;
        slow=head, fast=head;
        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        return slow;

    }
    ListNode* mergesortedlists(ListNode *p1, ListNode *p2){
        if(p1==NULL || p2==NULL){
            return (p1==NULL)?p2:p1;
        }

        ListNode *ans= new ListNode(0);
        ListNode *current= ans;

        while(p1!=NULL && p2!= NULL){
            if(p1->val<=p2->val){
                current->next=p1;
                p1=p1->next;
            }
            else{
                current->next=p2;
                p2=p2->next;
            }
            current=current->next;
        }
        if(p1!=NULL){
            current->next=p1;
        }
        else{
            current->next=p2;
        }
        return ans->next;
    }

    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL){
            return head;
        }
        ListNode *mid=Mid(head);
        ListNode *newhead=mid->next;

        mid->next= NULL;

        ListNode *first_half=sortList(head);
        ListNode *second_half=sortList(newhead);

        return mergesortedlists( first_half, second_half);
    }
    
};
